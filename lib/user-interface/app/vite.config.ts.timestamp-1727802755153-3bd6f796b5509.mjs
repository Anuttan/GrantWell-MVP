// vite.config.ts
import { defineConfig } from "file:///Users/serenagreen/Desktop/FFIO-MVP-RAG-chatbot/lib/user-interface/app/node_modules/vite/dist/node/index.js";
import fs from "fs";
import path from "path";
import react from "file:///Users/serenagreen/Desktop/FFIO-MVP-RAG-chatbot/lib/user-interface/app/node_modules/@vitejs/plugin-react/dist/index.mjs";
var isDev = process.env.NODE_ENV === "development";
var vite_config_default = defineConfig({
  define: {
    "process.env": {}
  },
  plugins: [
    isDev && {
      name: "aws-exports",
      writeBundle() {
        const outputPath = path.resolve("public/aws-exports.json");
        fs.writeFileSync(
          outputPath,
          JSON.stringify(
            {
              aws_project_region: process.env.AWS_PROJECT_REGION,
              aws_cognito_region: process.env.AWS_COGNITO_REGION,
              aws_user_pools_id: process.env.AWS_USER_POOLS_ID,
              aws_user_pools_web_client_id: process.env.AWS_USER_POOLS_WEB_CLIENT_ID,
              config: {
                api_endpoint: `https://${process.env.API_DISTRIBUTION_DOMAIN_NAME}/api`,
                websocket_endpoint: `wss://${process.env.API_DISTRIBUTION_DOMAIN_NAME}/socket`,
                rag_enabled: ["T", "t", "true", "True", "TRUE", "1"].includes(
                  process.env.RAG_ENABLED
                ),
                default_embeddings_model: process.env.DEFAULT_EMBEDDINGS_MODEL,
                default_cross_encoder_model: process.env.DEFAULT_CROSS_ENCODER_MODEL
              }
            },
            null,
            2
          ),
          "utf-8"
        );
      }
    },
    react()
  ],
  server: {
    port: 3e3
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvVXNlcnMvc2VyZW5hZ3JlZW4vRGVza3RvcC9GRklPLU1WUC1SQUctY2hhdGJvdC9saWIvdXNlci1pbnRlcmZhY2UvYXBwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvc2VyZW5hZ3JlZW4vRGVza3RvcC9GRklPLU1WUC1SQUctY2hhdGJvdC9saWIvdXNlci1pbnRlcmZhY2UvYXBwL3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9Vc2Vycy9zZXJlbmFncmVlbi9EZXNrdG9wL0ZGSU8tTVZQLVJBRy1jaGF0Ym90L2xpYi91c2VyLWludGVyZmFjZS9hcHAvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjtcblxuY29uc3QgaXNEZXYgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiO1xuXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcbiAgZGVmaW5lOiB7XG4gICAgXCJwcm9jZXNzLmVudlwiOiB7fSxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIGlzRGV2ICYmIHtcbiAgICAgIG5hbWU6IFwiYXdzLWV4cG9ydHNcIixcbiAgICAgIHdyaXRlQnVuZGxlKCkge1xuICAgICAgICBjb25zdCBvdXRwdXRQYXRoID0gcGF0aC5yZXNvbHZlKFwicHVibGljL2F3cy1leHBvcnRzLmpzb25cIik7XG5cbiAgICAgICAgLy8gV3JpdGUgdGhlIG1vZGlmaWVkIEpTT04gZGF0YSB0byB0aGUgcHVibGljIGZvbGRlclxuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKFxuICAgICAgICAgIG91dHB1dFBhdGgsXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGF3c19wcm9qZWN0X3JlZ2lvbjogcHJvY2Vzcy5lbnYuQVdTX1BST0pFQ1RfUkVHSU9OLFxuICAgICAgICAgICAgICBhd3NfY29nbml0b19yZWdpb246IHByb2Nlc3MuZW52LkFXU19DT0dOSVRPX1JFR0lPTixcbiAgICAgICAgICAgICAgYXdzX3VzZXJfcG9vbHNfaWQ6IHByb2Nlc3MuZW52LkFXU19VU0VSX1BPT0xTX0lELFxuICAgICAgICAgICAgICBhd3NfdXNlcl9wb29sc193ZWJfY2xpZW50X2lkOlxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkFXU19VU0VSX1BPT0xTX1dFQl9DTElFTlRfSUQsXG4gICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIGFwaV9lbmRwb2ludDogYGh0dHBzOi8vJHtwcm9jZXNzLmVudi5BUElfRElTVFJJQlVUSU9OX0RPTUFJTl9OQU1FfS9hcGlgLFxuICAgICAgICAgICAgICAgIHdlYnNvY2tldF9lbmRwb2ludDogYHdzczovLyR7cHJvY2Vzcy5lbnYuQVBJX0RJU1RSSUJVVElPTl9ET01BSU5fTkFNRX0vc29ja2V0YCxcbiAgICAgICAgICAgICAgICByYWdfZW5hYmxlZDogW1wiVFwiLCBcInRcIiwgXCJ0cnVlXCIsIFwiVHJ1ZVwiLCBcIlRSVUVcIiwgXCIxXCJdLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuUkFHX0VOQUJMRURcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRfZW1iZWRkaW5nc19tb2RlbDogcHJvY2Vzcy5lbnYuREVGQVVMVF9FTUJFRERJTkdTX01PREVMLFxuICAgICAgICAgICAgICAgIGRlZmF1bHRfY3Jvc3NfZW5jb2Rlcl9tb2RlbDpcbiAgICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52LkRFRkFVTFRfQ1JPU1NfRU5DT0RFUl9NT0RFTCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgMlxuICAgICAgICAgICksXG4gICAgICAgICAgXCJ1dGYtOFwiXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgcmVhY3QoKSxcbiAgXSxcbiAgc2VydmVyOiB7XG4gICAgcG9ydDogMzAwMCxcbiAgfSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFvWSxTQUFTLG9CQUFvQjtBQUNqYSxPQUFPLFFBQVE7QUFDZixPQUFPLFVBQVU7QUFDakIsT0FBTyxXQUFXO0FBRWxCLElBQU0sUUFBUSxRQUFRLElBQUksYUFBYTtBQUd2QyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixRQUFRO0FBQUEsSUFDTixlQUFlLENBQUM7QUFBQSxFQUNsQjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsU0FBUztBQUFBLE1BQ1AsTUFBTTtBQUFBLE1BQ04sY0FBYztBQUNaLGNBQU0sYUFBYSxLQUFLLFFBQVEseUJBQXlCO0FBR3pELFdBQUc7QUFBQSxVQUNEO0FBQUEsVUFDQSxLQUFLO0FBQUEsWUFDSDtBQUFBLGNBQ0Usb0JBQW9CLFFBQVEsSUFBSTtBQUFBLGNBQ2hDLG9CQUFvQixRQUFRLElBQUk7QUFBQSxjQUNoQyxtQkFBbUIsUUFBUSxJQUFJO0FBQUEsY0FDL0IsOEJBQ0UsUUFBUSxJQUFJO0FBQUEsY0FDZCxRQUFRO0FBQUEsZ0JBQ04sY0FBYyxXQUFXLFFBQVEsSUFBSSw0QkFBNEI7QUFBQSxnQkFDakUsb0JBQW9CLFNBQVMsUUFBUSxJQUFJLDRCQUE0QjtBQUFBLGdCQUNyRSxhQUFhLENBQUMsS0FBSyxLQUFLLFFBQVEsUUFBUSxRQUFRLEdBQUcsRUFBRTtBQUFBLGtCQUNuRCxRQUFRLElBQUk7QUFBQSxnQkFDZDtBQUFBLGdCQUNBLDBCQUEwQixRQUFRLElBQUk7QUFBQSxnQkFDdEMsNkJBQ0UsUUFBUSxJQUFJO0FBQUEsY0FDaEI7QUFBQSxZQUNGO0FBQUEsWUFDQTtBQUFBLFlBQ0E7QUFBQSxVQUNGO0FBQUEsVUFDQTtBQUFBLFFBQ0Y7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUFBLElBQ0EsTUFBTTtBQUFBLEVBQ1I7QUFBQSxFQUNBLFFBQVE7QUFBQSxJQUNOLE1BQU07QUFBQSxFQUNSO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
